
UART_Exercise_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800207c  0800207c  0000307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020a4  080020a4  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  080020a4  080020a4  000030a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020ac  080020ac  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020ac  080020ac  000030ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020b0  080020b0  000030b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080020b4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000010  080020c4  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080020c4  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f67  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a1  00000000  00000000  0000bfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0000d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f7  00000000  00000000  0000dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a12  00000000  00000000  0000e0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008845  00000000  00000000  0002ead1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7890  00000000  00000000  00037316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b4  00000000  00000000  000febec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001005a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002064 	.word	0x08002064

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08002064 	.word	0x08002064

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <SysTick_Handler>:
 */
#include "main.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

		HAL_IncTick();
 8000508:	f000 f99a 	bl	8000840 <HAL_IncTick>
		HAL_SYSTICK_IRQHandler();
 800050c:	f000 fac9 	bl	8000aa2 <HAL_SYSTICK_IRQHandler>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8000518:	4802      	ldr	r0, [pc, #8]	@ (8000524 <USART2_IRQHandler+0x10>)
 800051a:	f000 fe29 	bl	8001170 <HAL_UART_IRQHandler>

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000002c 	.word	0x2000002c

08000528 <main>:
uint8_t dataBuffer[100];
uint8_t rcvd_data;
uint32_t count = 0;
uint8_t reception_complete = FALSE;

int main(void){
 8000528:	b598      	push	{r3, r4, r7, lr}
 800052a:	af00      	add	r7, sp, #0

	HAL_Init();
 800052c:	f000 f936 	bl	800079c <HAL_Init>
	SystemClockConfig();
 8000530:	f000 f853 	bl	80005da <SystemClockConfig>
	UART2_Init();
 8000534:	f000 f824 	bl	8000580 <UART2_Init>

	HAL_UART_Transmit(&huart2, (uint8_t *)user, (uint16_t)strlen(user), HAL_MAX_DELAY);
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <main+0x48>)
 800053a:	681c      	ldr	r4, [r3, #0]
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <main+0x48>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fe5f 	bl	8000204 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	b29a      	uxth	r2, r3
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	4621      	mov	r1, r4
 8000550:	4808      	ldr	r0, [pc, #32]	@ (8000574 <main+0x4c>)
 8000552:	f000 fd5d 	bl	8001010 <HAL_UART_Transmit>


	while(reception_complete != TRUE){
 8000556:	e004      	b.n	8000562 <main+0x3a>
		HAL_UART_Receive_IT(&huart2, &rcvd_data, 1);
 8000558:	2201      	movs	r2, #1
 800055a:	4907      	ldr	r1, [pc, #28]	@ (8000578 <main+0x50>)
 800055c:	4805      	ldr	r0, [pc, #20]	@ (8000574 <main+0x4c>)
 800055e:	f000 fde2 	bl	8001126 <HAL_UART_Receive_IT>
	while(reception_complete != TRUE){
 8000562:	4b06      	ldr	r3, [pc, #24]	@ (800057c <main+0x54>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d1f6      	bne.n	8000558 <main+0x30>
	}


	while(1);
 800056a:	bf00      	nop
 800056c:	e7fd      	b.n	800056a <main+0x42>
 800056e:	bf00      	nop
 8000570:	20000000 	.word	0x20000000
 8000574:	2000002c 	.word	0x2000002c
 8000578:	200000d8 	.word	0x200000d8
 800057c:	200000e0 	.word	0x200000e0

08000580 <UART2_Init>:
	}

	return data;
}

void UART2_Init(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <UART2_Init+0x44>)
 8000586:	4a10      	ldr	r2, [pc, #64]	@ (80005c8 <UART2_Init+0x48>)
 8000588:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <UART2_Init+0x44>)
 800058c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000590:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength =  UART_WORDLENGTH_8B;
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <UART2_Init+0x44>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <UART2_Init+0x44>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <UART2_Init+0x44>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <UART2_Init+0x44>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <UART2_Init+0x44>)
 80005ac:	220c      	movs	r2, #12
 80005ae:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2)!= HAL_OK ){
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <UART2_Init+0x44>)
 80005b2:	f000 fcdd 	bl	8000f70 <HAL_UART_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <UART2_Init+0x40>

		Error_handler();
 80005bc:	f000 f806 	bl	80005cc <Error_handler>
	}
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000002c 	.word	0x2000002c
 80005c8:	40004400 	.word	0x40004400

080005cc <Error_handler>:

void Error_handler(void){
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <SystemClockConfig>:
void SystemClockConfig(void){
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0


}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

	if(rcvd_data == '\r'){
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_UART_RxCpltCallback+0x54>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b0d      	cmp	r3, #13
 80005f6:	d114      	bne.n	8000622 <HAL_UART_RxCpltCallback+0x3a>

		reception_complete = TRUE;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <HAL_UART_RxCpltCallback+0x58>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
		dataBuffer[count++] = '\r';
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_UART_RxCpltCallback+0x5c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	490f      	ldr	r1, [pc, #60]	@ (8000644 <HAL_UART_RxCpltCallback+0x5c>)
 8000606:	600a      	str	r2, [r1, #0]
 8000608:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <HAL_UART_RxCpltCallback+0x60>)
 800060a:	210d      	movs	r1, #13
 800060c:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart2, dataBuffer, count, HAL_MAX_DELAY);
 800060e:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <HAL_UART_RxCpltCallback+0x5c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	490b      	ldr	r1, [pc, #44]	@ (8000648 <HAL_UART_RxCpltCallback+0x60>)
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <HAL_UART_RxCpltCallback+0x64>)
 800061c:	f000 fcf8 	bl	8001010 <HAL_UART_Transmit>
	}else{
		dataBuffer[count++] = rcvd_data;
	}


}
 8000620:	e008      	b.n	8000634 <HAL_UART_RxCpltCallback+0x4c>
		dataBuffer[count++] = rcvd_data;
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <HAL_UART_RxCpltCallback+0x5c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	4906      	ldr	r1, [pc, #24]	@ (8000644 <HAL_UART_RxCpltCallback+0x5c>)
 800062a:	600a      	str	r2, [r1, #0]
 800062c:	4a03      	ldr	r2, [pc, #12]	@ (800063c <HAL_UART_RxCpltCallback+0x54>)
 800062e:	7811      	ldrb	r1, [r2, #0]
 8000630:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <HAL_UART_RxCpltCallback+0x60>)
 8000632:	54d1      	strb	r1, [r2, r3]
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000d8 	.word	0x200000d8
 8000640:	200000e0 	.word	0x200000e0
 8000644:	200000dc 	.word	0x200000dc
 8000648:	20000074 	.word	0x20000074
 800064c:	2000002c 	.word	0x2000002c

08000650 <HAL_MspInit>:
 */
#include "main.h"


void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  //low level inits.
	// set up the priority grouping of the arm cortex mx

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f9e3 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

	// enable the required system exceptions of the arm

	SCB->SHCSR  |= 0x7 <<16; // usg fault, memory fault enabled
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <HAL_MspInit+0x40>)
 800065c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800065e:	4a0c      	ldr	r2, [pc, #48]	@ (8000690 <HAL_MspInit+0x40>)
 8000660:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000664:	6253      	str	r3, [r2, #36]	@ 0x24

	// set up the priority for exceptions
	HAL_NVIC_SetPriority( MemoryManagement_IRQn,0,0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	f06f 000b 	mvn.w	r0, #11
 800066e:	f000 f9e2 	bl	8000a36 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( BusFault_IRQn,0,0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	f06f 000a 	mvn.w	r0, #10
 800067a:	f000 f9dc 	bl	8000a36 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( UsageFault_IRQn,0,0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	f06f 0009 	mvn.w	r0, #9
 8000686:	f000 f9d6 	bl	8000a36 <HAL_NVIC_SetPriority>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;

	//low level inints
	// enable the clock
	__HAL_RCC_USART2_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <HAL_UART_MspInit+0x88>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <HAL_UART_MspInit+0x88>)
 80006a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <HAL_UART_MspInit+0x88>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <HAL_UART_MspInit+0x88>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <HAL_UART_MspInit+0x88>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <HAL_UART_MspInit+0x88>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
	//pin muxing config
		gpio_uart.Pin = GPIO_PIN_2;
 80006d4:	2304      	movs	r3, #4
 80006d6:	617b      	str	r3, [r7, #20]
		gpio_uart.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
		gpio_uart.Pull = GPIO_PULLUP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
		gpio_uart.Alternate = GPIO_AF7_USART2; //UART_Tx
 80006e4:	2307      	movs	r3, #7
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480c      	ldr	r0, [pc, #48]	@ (8000720 <HAL_UART_MspInit+0x8c>)
 80006f0:	f000 fa76 	bl	8000be0 <HAL_GPIO_Init>

		gpio_uart.Pin = GPIO_PIN_3;
 80006f4:	2308      	movs	r3, #8
 80006f6:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4808      	ldr	r0, [pc, #32]	@ (8000720 <HAL_UART_MspInit+0x8c>)
 8000700:	f000 fa6e 	bl	8000be0 <HAL_GPIO_Init>

	// enable IRQ and set the priority (NVIC Settings)
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000704:	2026      	movs	r0, #38	@ 0x26
 8000706:	f000 f9b2 	bl	8000a6e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	210f      	movs	r1, #15
 800070e:	2026      	movs	r0, #38	@ 0x26
 8000710:	f000 f991 	bl	8000a36 <HAL_NVIC_SetPriority>

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	@ 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000

08000724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <SystemInit+0x20>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800072e:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <SystemInit+0x20>)
 8000730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000780 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800074c:	f7ff ffea 	bl	8000724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	@ (8000784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	@ (8000788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	@ (8000794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000776:	f001 fc51 	bl	800201c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077a:	f7ff fed5 	bl	8000528 <main>
  bx  lr    
 800077e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800078c:	080020b4 	.word	0x080020b4
  ldr r2, =_sbss
 8000790:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000794:	200000e8 	.word	0x200000e8

08000798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_Init+0x40>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <HAL_Init+0x40>)
 80007a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007ac:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_Init+0x40>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <HAL_Init+0x40>)
 80007b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_Init+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <HAL_Init+0x40>)
 80007be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f92b 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff ff3e 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023c00 	.word	0x40023c00

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f943 	bl	8000a8a <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 f90b 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000004 	.word	0x20000004
 8000838:	2000000c 	.word	0x2000000c
 800083c:	20000008 	.word	0x20000008

08000840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_IncTick+0x20>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_IncTick+0x24>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <HAL_IncTick+0x24>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000000c 	.word	0x2000000c
 8000864:	200000e4 	.word	0x200000e4

08000868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <HAL_GetTick+0x14>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	200000e4 	.word	0x200000e4

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	@ (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db0b      	blt.n	800090e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 021f 	and.w	r2, r3, #31
 80008fc:	4907      	ldr	r1, [pc, #28]	@ (800091c <__NVIC_EnableIRQ+0x38>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	2001      	movs	r0, #1
 8000906:	fa00 f202 	lsl.w	r2, r0, r2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	@ (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	@ (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	@ 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	@ 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff ff8e 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff29 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff3e 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff8e 	bl	8000974 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff31 	bl	80008e4 <__NVIC_EnableIRQ>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffa2 	bl	80009dc <SysTick_Config>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000aa6:	f000 f802 	bl	8000aae <HAL_SYSTICK_Callback>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000aca:	f7ff fecd 	bl	8000868 <HAL_GetTick>
 8000ace:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d008      	beq.n	8000aee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2280      	movs	r2, #128	@ 0x80
 8000ae0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e052      	b.n	8000b94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 0216 	bic.w	r2, r2, #22
 8000afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d103      	bne.n	8000b1e <HAL_DMA_Abort+0x62>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d007      	beq.n	8000b2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 0208 	bic.w	r2, r2, #8
 8000b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0201 	bic.w	r2, r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b3e:	e013      	b.n	8000b68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b40:	f7ff fe92 	bl	8000868 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d90c      	bls.n	8000b68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2220      	movs	r2, #32
 8000b52:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2203      	movs	r2, #3
 8000b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e015      	b.n	8000b94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e4      	bne.n	8000b40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b7a:	223f      	movs	r2, #63	@ 0x3f
 8000b7c:	409a      	lsls	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d004      	beq.n	8000bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2280      	movs	r2, #128	@ 0x80
 8000bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00c      	b.n	8000bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0201 	bic.w	r2, r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e165      	b.n	8000ec8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8154 	bne.w	8000ec2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d130      	bne.n	8000c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	f003 0201 	and.w	r2, r3, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d017      	beq.n	8000cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80ae 	beq.w	8000ec2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee0 <HAL_GPIO_Init+0x300>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ee0 <HAL_GPIO_Init+0x300>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d76:	4b5a      	ldr	r3, [pc, #360]	@ (8000ee0 <HAL_GPIO_Init+0x300>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a58      	ldr	r2, [pc, #352]	@ (8000ee4 <HAL_GPIO_Init+0x304>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ee8 <HAL_GPIO_Init+0x308>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d025      	beq.n	8000dfa <HAL_GPIO_Init+0x21a>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4e      	ldr	r2, [pc, #312]	@ (8000eec <HAL_GPIO_Init+0x30c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d01f      	beq.n	8000df6 <HAL_GPIO_Init+0x216>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4d      	ldr	r2, [pc, #308]	@ (8000ef0 <HAL_GPIO_Init+0x310>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d019      	beq.n	8000df2 <HAL_GPIO_Init+0x212>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ef4 <HAL_GPIO_Init+0x314>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0x20e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef8 <HAL_GPIO_Init+0x318>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d00d      	beq.n	8000dea <HAL_GPIO_Init+0x20a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8000efc <HAL_GPIO_Init+0x31c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d007      	beq.n	8000de6 <HAL_GPIO_Init+0x206>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a49      	ldr	r2, [pc, #292]	@ (8000f00 <HAL_GPIO_Init+0x320>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_GPIO_Init+0x202>
 8000dde:	2306      	movs	r3, #6
 8000de0:	e00c      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000de2:	2307      	movs	r3, #7
 8000de4:	e00a      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000de6:	2305      	movs	r3, #5
 8000de8:	e008      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000dea:	2304      	movs	r3, #4
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	f002 0203 	and.w	r2, r2, #3
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e0c:	4935      	ldr	r1, [pc, #212]	@ (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3e:	4a31      	ldr	r2, [pc, #196]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e44:	4b2f      	ldr	r3, [pc, #188]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e68:	4a26      	ldr	r2, [pc, #152]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e92:	4a1c      	ldr	r2, [pc, #112]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ebc:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	f67f ae96 	bls.w	8000bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f24:	f7ff fff0 	bl	8000f08 <HAL_RCC_GetHCLKFreq>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	0a9b      	lsrs	r3, r3, #10
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	4903      	ldr	r1, [pc, #12]	@ (8000f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f36:	5ccb      	ldrb	r3, [r1, r3]
 8000f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	0800209c 	.word	0x0800209c

08000f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f4c:	f7ff ffdc 	bl	8000f08 <HAL_RCC_GetHCLKFreq>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	0b5b      	lsrs	r3, r3, #13
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	4903      	ldr	r1, [pc, #12]	@ (8000f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f5e:	5ccb      	ldrb	r3, [r1, r3]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	0800209c 	.word	0x0800209c

08000f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e042      	b.n	8001008 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d106      	bne.n	8000f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fb7c 	bl	8000694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2224      	movs	r2, #36	@ 0x24
 8000fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 fdbd 	bl	8001b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af02      	add	r7, sp, #8
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b20      	cmp	r3, #32
 800102e:	d175      	bne.n	800111c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <HAL_UART_Transmit+0x2c>
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e06e      	b.n	800111e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2221      	movs	r2, #33	@ 0x21
 800104a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800104e:	f7ff fc0b 	bl	8000868 <HAL_GetTick>
 8001052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	88fa      	ldrh	r2, [r7, #6]
 800105e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001068:	d108      	bne.n	800107c <HAL_UART_Transmit+0x6c>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d104      	bne.n	800107c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	e003      	b.n	8001084 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001084:	e02e      	b.n	80010e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2200      	movs	r2, #0
 800108e:	2180      	movs	r1, #128	@ 0x80
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f000 fb1f 	bl	80016d4 <UART_WaitOnFlagUntilTimeout>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2220      	movs	r2, #32
 80010a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e03a      	b.n	800111e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10b      	bne.n	80010c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	3302      	adds	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	e007      	b.n	80010d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	3301      	adds	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3b01      	subs	r3, #1
 80010de:	b29a      	uxth	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1cb      	bne.n	8001086 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2200      	movs	r2, #0
 80010f6:	2140      	movs	r1, #64	@ 0x40
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 faeb 	bl	80016d4 <UART_WaitOnFlagUntilTimeout>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2220      	movs	r2, #32
 8001108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e006      	b.n	800111e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2220      	movs	r2, #32
 8001114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	e000      	b.n	800111e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800111c:	2302      	movs	r3, #2
  }
}
 800111e:	4618      	mov	r0, r3
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	4613      	mov	r3, r2
 8001132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b20      	cmp	r3, #32
 800113e:	d112      	bne.n	8001166 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_UART_Receive_IT+0x26>
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e00b      	b.n	8001168 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2200      	movs	r2, #0
 8001154:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	461a      	mov	r2, r3
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 fb12 	bl	8001786 <UART_Start_Receive_IT>
 8001162:	4603      	mov	r3, r0
 8001164:	e000      	b.n	8001168 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001166:	2302      	movs	r3, #2
  }
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0ba      	sub	sp, #232	@ 0xe8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80011a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80011ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <HAL_UART_IRQHandler+0x66>
 80011c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fbf2 	bl	80019b8 <UART_Receive_IT>
      return;
 80011d4:	e25b      	b.n	800168e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80011d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80de 	beq.w	800139c <HAL_UART_IRQHandler+0x22c>
 80011e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80011ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80011f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80d1 	beq.w	800139c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80011fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00b      	beq.n	800121e <HAL_UART_IRQHandler+0xae>
 8001206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800120a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800121e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <HAL_UART_IRQHandler+0xd2>
 800122a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f043 0202 	orr.w	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_UART_IRQHandler+0xf6>
 800124e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	f043 0204 	orr.w	r2, r3, #4
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d011      	beq.n	8001296 <HAL_UART_IRQHandler+0x126>
 8001272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800127e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f043 0208 	orr.w	r2, r3, #8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 81f2 	beq.w	8001684 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <HAL_UART_IRQHandler+0x14e>
 80012ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fb7d 	bl	80019b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c8:	2b40      	cmp	r3, #64	@ 0x40
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <HAL_UART_IRQHandler+0x17a>
 80012e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d04f      	beq.n	800138a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa85 	bl	80017fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fa:	2b40      	cmp	r3, #64	@ 0x40
 80012fc:	d141      	bne.n	8001382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3314      	adds	r3, #20
 8001304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800130c:	e853 3f00 	ldrex	r3, [r3]
 8001310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800131c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3314      	adds	r3, #20
 8001326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800132a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800132e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800133a:	e841 2300 	strex	r3, r2, [r1]
 800133e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1d9      	bne.n	80012fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800134e:	2b00      	cmp	r3, #0
 8001350:	d013      	beq.n	800137a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001356:	4a7e      	ldr	r2, [pc, #504]	@ (8001550 <HAL_UART_IRQHandler+0x3e0>)
 8001358:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fc1c 	bl	8000b9c <HAL_DMA_Abort_IT>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d016      	beq.n	8001398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800136e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001374:	4610      	mov	r0, r2
 8001376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001378:	e00e      	b.n	8001398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f994 	bl	80016a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001380:	e00a      	b.n	8001398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f990 	bl	80016a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001388:	e006      	b.n	8001398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f98c 	bl	80016a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001396:	e175      	b.n	8001684 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001398:	bf00      	nop
    return;
 800139a:	e173      	b.n	8001684 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	f040 814f 	bne.w	8001644 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80013a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8148 	beq.w	8001644 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80013b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8141 	beq.w	8001644 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e2:	2b40      	cmp	r3, #64	@ 0x40
 80013e4:	f040 80b6 	bne.w	8001554 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80013f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 8145 	beq.w	8001688 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001406:	429a      	cmp	r2, r3
 8001408:	f080 813e 	bcs.w	8001688 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001412:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800141e:	f000 8088 	beq.w	8001532 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	330c      	adds	r3, #12
 8001428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800142c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001430:	e853 3f00 	ldrex	r3, [r3]
 8001434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001438:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800143c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	330c      	adds	r3, #12
 800144a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800144e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001456:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800145a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800145e:	e841 2300 	strex	r3, r2, [r1]
 8001462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1d9      	bne.n	8001422 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3314      	adds	r3, #20
 8001474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001478:	e853 3f00 	ldrex	r3, [r3]
 800147c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800147e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3314      	adds	r3, #20
 800148e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001492:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001496:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001498:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800149a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800149e:	e841 2300 	strex	r3, r2, [r1]
 80014a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80014a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1e1      	bne.n	800146e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3314      	adds	r3, #20
 80014b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014b4:	e853 3f00 	ldrex	r3, [r3]
 80014b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80014ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3314      	adds	r3, #20
 80014ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80014ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80014d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80014d6:	e841 2300 	strex	r3, r2, [r1]
 80014da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80014dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e3      	bne.n	80014aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2220      	movs	r2, #32
 80014e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	330c      	adds	r3, #12
 80014f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014fa:	e853 3f00 	ldrex	r3, [r3]
 80014fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001502:	f023 0310 	bic.w	r3, r3, #16
 8001506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	330c      	adds	r3, #12
 8001510:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001514:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001516:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001518:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800151a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800151c:	e841 2300 	strex	r3, r2, [r1]
 8001520:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e3      	bne.n	80014f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fac5 	bl	8000abc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2202      	movs	r2, #2
 8001536:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001540:	b29b      	uxth	r3, r3
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b29b      	uxth	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f8b7 	bl	80016bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800154e:	e09b      	b.n	8001688 <HAL_UART_IRQHandler+0x518>
 8001550:	080018c1 	.word	0x080018c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800155c:	b29b      	uxth	r3, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001568:	b29b      	uxth	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 808e 	beq.w	800168c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8089 	beq.w	800168c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	330c      	adds	r3, #12
 8001580:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001584:	e853 3f00 	ldrex	r3, [r3]
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800158a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001590:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	330c      	adds	r3, #12
 800159a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800159e:	647a      	str	r2, [r7, #68]	@ 0x44
 80015a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80015a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015a6:	e841 2300 	strex	r3, r2, [r1]
 80015aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80015ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1e3      	bne.n	800157a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3314      	adds	r3, #20
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	e853 3f00 	ldrex	r3, [r3]
 80015c0:	623b      	str	r3, [r7, #32]
   return(result);
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3314      	adds	r3, #20
 80015d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80015d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015de:	e841 2300 	strex	r3, r2, [r1]
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80015e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1e3      	bne.n	80015b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2220      	movs	r2, #32
 80015ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	330c      	adds	r3, #12
 80015fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	e853 3f00 	ldrex	r3, [r3]
 8001606:	60fb      	str	r3, [r7, #12]
   return(result);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f023 0310 	bic.w	r3, r3, #16
 800160e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	330c      	adds	r3, #12
 8001618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800161c:	61fa      	str	r2, [r7, #28]
 800161e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001620:	69b9      	ldr	r1, [r7, #24]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	e841 2300 	strex	r3, r2, [r1]
 8001628:	617b      	str	r3, [r7, #20]
   return(result);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e3      	bne.n	80015f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f83d 	bl	80016bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001642:	e023      	b.n	800168c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <HAL_UART_IRQHandler+0x4f4>
 8001650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f943 	bl	80018e8 <UART_Transmit_IT>
    return;
 8001662:	e014      	b.n	800168e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00e      	beq.n	800168e <HAL_UART_IRQHandler+0x51e>
 8001670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f983 	bl	8001988 <UART_EndTransmit_IT>
    return;
 8001682:	e004      	b.n	800168e <HAL_UART_IRQHandler+0x51e>
    return;
 8001684:	bf00      	nop
 8001686:	e002      	b.n	800168e <HAL_UART_IRQHandler+0x51e>
      return;
 8001688:	bf00      	nop
 800168a:	e000      	b.n	800168e <HAL_UART_IRQHandler+0x51e>
      return;
 800168c:	bf00      	nop
  }
}
 800168e:	37e8      	adds	r7, #232	@ 0xe8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016e4:	e03b      	b.n	800175e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d037      	beq.n	800175e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ee:	f7ff f8bb 	bl	8000868 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	6a3a      	ldr	r2, [r7, #32]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d302      	bcc.n	8001704 <UART_WaitOnFlagUntilTimeout+0x30>
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e03a      	b.n	800177e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d023      	beq.n	800175e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b80      	cmp	r3, #128	@ 0x80
 800171a:	d020      	beq.n	800175e <UART_WaitOnFlagUntilTimeout+0x8a>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b40      	cmp	r3, #64	@ 0x40
 8001720:	d01d      	beq.n	800175e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b08      	cmp	r3, #8
 800172e:	d116      	bne.n	800175e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f857 	bl	80017fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2208      	movs	r2, #8
 8001750:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4013      	ands	r3, r2
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	429a      	cmp	r2, r3
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	429a      	cmp	r2, r3
 800177a:	d0b4      	beq.n	80016e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001786:	b480      	push	{r7}
 8001788:	b085      	sub	sp, #20
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	4613      	mov	r3, r2
 8001792:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	88fa      	ldrh	r2, [r7, #6]
 800179e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2222      	movs	r2, #34	@ 0x22
 80017b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0220 	orr.w	r2, r2, #32
 80017ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b095      	sub	sp, #84	@ 0x54
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	330c      	adds	r3, #12
 8001808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800180a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180c:	e853 3f00 	ldrex	r3, [r3]
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	330c      	adds	r3, #12
 8001820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001822:	643a      	str	r2, [r7, #64]	@ 0x40
 8001824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800182a:	e841 2300 	strex	r3, r2, [r1]
 800182e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1e5      	bne.n	8001802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3314      	adds	r3, #20
 800183c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	e853 3f00 	ldrex	r3, [r3]
 8001844:	61fb      	str	r3, [r7, #28]
   return(result);
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3314      	adds	r3, #20
 8001854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800185a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800185c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800185e:	e841 2300 	strex	r3, r2, [r1]
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1e5      	bne.n	8001836 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	2b01      	cmp	r3, #1
 8001870:	d119      	bne.n	80018a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	330c      	adds	r3, #12
 8001878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	e853 3f00 	ldrex	r3, [r3]
 8001880:	60bb      	str	r3, [r7, #8]
   return(result);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f023 0310 	bic.w	r3, r3, #16
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	330c      	adds	r3, #12
 8001890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001892:	61ba      	str	r2, [r7, #24]
 8001894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001896:	6979      	ldr	r1, [r7, #20]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	e841 2300 	strex	r3, r2, [r1]
 800189e:	613b      	str	r3, [r7, #16]
   return(result);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1e5      	bne.n	8001872 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80018b4:	bf00      	nop
 80018b6:	3754      	adds	r7, #84	@ 0x54
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7ff fee4 	bl	80016a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80018e0:	bf00      	nop
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b21      	cmp	r3, #33	@ 0x21
 80018fa:	d13e      	bne.n	800197a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001904:	d114      	bne.n	8001930 <UART_Transmit_IT+0x48>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d110      	bne.n	8001930 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001922:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	1c9a      	adds	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	621a      	str	r2, [r3, #32]
 800192e:	e008      	b.n	8001942 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	1c59      	adds	r1, r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6211      	str	r1, [r2, #32]
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001946:	b29b      	uxth	r3, r3
 8001948:	3b01      	subs	r3, #1
 800194a:	b29b      	uxth	r3, r3
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4619      	mov	r1, r3
 8001950:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001964:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001974:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800197a:	2302      	movs	r3, #2
  }
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800199e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fe73 	bl	8001694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b22      	cmp	r3, #34	@ 0x22
 80019ca:	f040 80ae 	bne.w	8001b2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019d6:	d117      	bne.n	8001a08 <UART_Receive_IT+0x50>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d113      	bne.n	8001a08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	1c9a      	adds	r2, r3, #2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a06:	e026      	b.n	8001a56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a1a:	d007      	beq.n	8001a2c <UART_Receive_IT+0x74>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <UART_Receive_IT+0x82>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d106      	bne.n	8001a3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e008      	b.n	8001a4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4619      	mov	r1, r3
 8001a64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d15d      	bne.n	8001b26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0220 	bic.w	r2, r2, #32
 8001a78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d135      	bne.n	8001b1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	330c      	adds	r3, #12
 8001abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	e853 3f00 	ldrex	r3, [r3]
 8001ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f023 0310 	bic.w	r3, r3, #16
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	330c      	adds	r3, #12
 8001ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad6:	623a      	str	r2, [r7, #32]
 8001ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ada:	69f9      	ldr	r1, [r7, #28]
 8001adc:	6a3a      	ldr	r2, [r7, #32]
 8001ade:	e841 2300 	strex	r3, r2, [r1]
 8001ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1e5      	bne.n	8001ab6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d10a      	bne.n	8001b0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fdd1 	bl	80016bc <HAL_UARTEx_RxEventCallback>
 8001b1a:	e002      	b.n	8001b22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7fe fd63 	bl	80005e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e002      	b.n	8001b2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3730      	adds	r7, #48	@ 0x30
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b38:	b0c0      	sub	sp, #256	@ 0x100
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b50:	68d9      	ldr	r1, [r3, #12]
 8001b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	ea40 0301 	orr.w	r3, r0, r1
 8001b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001b8c:	f021 010c 	bic.w	r1, r1, #12
 8001b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bae:	6999      	ldr	r1, [r3, #24]
 8001bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	ea40 0301 	orr.w	r3, r0, r1
 8001bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8001e00 <UART_SetConfig+0x2cc>)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d005      	beq.n	8001bd4 <UART_SetConfig+0xa0>
 8001bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b8d      	ldr	r3, [pc, #564]	@ (8001e04 <UART_SetConfig+0x2d0>)
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d104      	bne.n	8001bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bd4:	f7ff f9b8 	bl	8000f48 <HAL_RCC_GetPCLK2Freq>
 8001bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001bdc:	e003      	b.n	8001be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bde:	f7ff f99f 	bl	8000f20 <HAL_RCC_GetPCLK1Freq>
 8001be2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bf0:	f040 810c 	bne.w	8001e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c06:	4622      	mov	r2, r4
 8001c08:	462b      	mov	r3, r5
 8001c0a:	1891      	adds	r1, r2, r2
 8001c0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c0e:	415b      	adcs	r3, r3
 8001c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c16:	4621      	mov	r1, r4
 8001c18:	eb12 0801 	adds.w	r8, r2, r1
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	eb43 0901 	adc.w	r9, r3, r1
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	eb18 0303 	adds.w	r3, r8, r3
 8001c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c44:	462b      	mov	r3, r5
 8001c46:	eb49 0303 	adc.w	r3, r9, r3
 8001c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001c62:	460b      	mov	r3, r1
 8001c64:	18db      	adds	r3, r3, r3
 8001c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c68:	4613      	mov	r3, r2
 8001c6a:	eb42 0303 	adc.w	r3, r2, r3
 8001c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c78:	f7fe facc 	bl	8000214 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4b61      	ldr	r3, [pc, #388]	@ (8001e08 <UART_SetConfig+0x2d4>)
 8001c82:	fba3 2302 	umull	r2, r3, r3, r2
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	011c      	lsls	r4, r3, #4
 8001c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	1891      	adds	r1, r2, r2
 8001ca2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ca4:	415b      	adcs	r3, r3
 8001ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cac:	4641      	mov	r1, r8
 8001cae:	eb12 0a01 	adds.w	sl, r2, r1
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ccc:	4692      	mov	sl, r2
 8001cce:	469b      	mov	fp, r3
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8001cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001cda:	464b      	mov	r3, r9
 8001cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	18db      	adds	r3, r3, r3
 8001cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cfe:	4613      	mov	r3, r2
 8001d00:	eb42 0303 	adc.w	r3, r2, r3
 8001d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d0e:	f7fe fa81 	bl	8000214 <__aeabi_uldivmod>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <UART_SetConfig+0x2d4>)
 8001d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2264      	movs	r2, #100	@ 0x64
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	1acb      	subs	r3, r1, r3
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d2e:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <UART_SetConfig+0x2d4>)
 8001d30:	fba3 2302 	umull	r2, r3, r3, r2
 8001d34:	095b      	lsrs	r3, r3, #5
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d3c:	441c      	add	r4, r3
 8001d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d42:	2200      	movs	r2, #0
 8001d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001d50:	4642      	mov	r2, r8
 8001d52:	464b      	mov	r3, r9
 8001d54:	1891      	adds	r1, r2, r2
 8001d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d58:	415b      	adcs	r3, r3
 8001d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d60:	4641      	mov	r1, r8
 8001d62:	1851      	adds	r1, r2, r1
 8001d64:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d66:	4649      	mov	r1, r9
 8001d68:	414b      	adcs	r3, r1
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d78:	4659      	mov	r1, fp
 8001d7a:	00cb      	lsls	r3, r1, #3
 8001d7c:	4651      	mov	r1, sl
 8001d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d82:	4651      	mov	r1, sl
 8001d84:	00ca      	lsls	r2, r1, #3
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4642      	mov	r2, r8
 8001d8e:	189b      	adds	r3, r3, r2
 8001d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d94:	464b      	mov	r3, r9
 8001d96:	460a      	mov	r2, r1
 8001d98:	eb42 0303 	adc.w	r3, r2, r3
 8001d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001dac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001db4:	460b      	mov	r3, r1
 8001db6:	18db      	adds	r3, r3, r3
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dba:	4613      	mov	r3, r2
 8001dbc:	eb42 0303 	adc.w	r3, r2, r3
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001dca:	f7fe fa23 	bl	8000214 <__aeabi_uldivmod>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <UART_SetConfig+0x2d4>)
 8001dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	2164      	movs	r1, #100	@ 0x64
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	3332      	adds	r3, #50	@ 0x32
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <UART_SetConfig+0x2d4>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	f003 0207 	and.w	r2, r3, #7
 8001df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4422      	add	r2, r4
 8001dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001dfc:	e106      	b.n	800200c <UART_SetConfig+0x4d8>
 8001dfe:	bf00      	nop
 8001e00:	40011000 	.word	0x40011000
 8001e04:	40011400 	.word	0x40011400
 8001e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e10:	2200      	movs	r2, #0
 8001e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e1e:	4642      	mov	r2, r8
 8001e20:	464b      	mov	r3, r9
 8001e22:	1891      	adds	r1, r2, r2
 8001e24:	6239      	str	r1, [r7, #32]
 8001e26:	415b      	adcs	r3, r3
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e2e:	4641      	mov	r1, r8
 8001e30:	1854      	adds	r4, r2, r1
 8001e32:	4649      	mov	r1, r9
 8001e34:	eb43 0501 	adc.w	r5, r3, r1
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	00eb      	lsls	r3, r5, #3
 8001e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e46:	00e2      	lsls	r2, r4, #3
 8001e48:	4614      	mov	r4, r2
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	18e3      	adds	r3, r4, r3
 8001e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e54:	464b      	mov	r3, r9
 8001e56:	eb45 0303 	adc.w	r3, r5, r3
 8001e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	008b      	lsls	r3, r1, #2
 8001e7e:	4621      	mov	r1, r4
 8001e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e84:	4621      	mov	r1, r4
 8001e86:	008a      	lsls	r2, r1, #2
 8001e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e8c:	f7fe f9c2 	bl	8000214 <__aeabi_uldivmod>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4b60      	ldr	r3, [pc, #384]	@ (8002018 <UART_SetConfig+0x4e4>)
 8001e96:	fba3 2302 	umull	r2, r3, r3, r2
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	011c      	lsls	r4, r3, #4
 8001e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	1891      	adds	r1, r2, r2
 8001eb6:	61b9      	str	r1, [r7, #24]
 8001eb8:	415b      	adcs	r3, r3
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	1851      	adds	r1, r2, r1
 8001ec4:	6139      	str	r1, [r7, #16]
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	414b      	adcs	r3, r1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ed8:	4659      	mov	r1, fp
 8001eda:	00cb      	lsls	r3, r1, #3
 8001edc:	4651      	mov	r1, sl
 8001ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ee2:	4651      	mov	r1, sl
 8001ee4:	00ca      	lsls	r2, r1, #3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	4642      	mov	r2, r8
 8001eee:	189b      	adds	r3, r3, r2
 8001ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ef4:	464b      	mov	r3, r9
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	eb42 0303 	adc.w	r3, r2, r3
 8001efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f18:	4649      	mov	r1, r9
 8001f1a:	008b      	lsls	r3, r1, #2
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f22:	4641      	mov	r1, r8
 8001f24:	008a      	lsls	r2, r1, #2
 8001f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f2a:	f7fe f973 	bl	8000214 <__aeabi_uldivmod>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4611      	mov	r1, r2
 8001f34:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <UART_SetConfig+0x4e4>)
 8001f36:	fba3 2301 	umull	r2, r3, r3, r1
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2264      	movs	r2, #100	@ 0x64
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	1acb      	subs	r3, r1, r3
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	3332      	adds	r3, #50	@ 0x32
 8001f48:	4a33      	ldr	r2, [pc, #204]	@ (8002018 <UART_SetConfig+0x4e4>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f54:	441c      	add	r4, r3
 8001f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001f64:	4642      	mov	r2, r8
 8001f66:	464b      	mov	r3, r9
 8001f68:	1891      	adds	r1, r2, r2
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	415b      	adcs	r3, r3
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f74:	4641      	mov	r1, r8
 8001f76:	1851      	adds	r1, r2, r1
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	414b      	adcs	r3, r1
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f8c:	4659      	mov	r1, fp
 8001f8e:	00cb      	lsls	r3, r1, #3
 8001f90:	4651      	mov	r1, sl
 8001f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f96:	4651      	mov	r1, sl
 8001f98:	00ca      	lsls	r2, r1, #3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	460a      	mov	r2, r1
 8001faa:	eb42 0303 	adc.w	r3, r2, r3
 8001fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fba:	667a      	str	r2, [r7, #100]	@ 0x64
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001fc8:	4649      	mov	r1, r9
 8001fca:	008b      	lsls	r3, r1, #2
 8001fcc:	4641      	mov	r1, r8
 8001fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fd2:	4641      	mov	r1, r8
 8001fd4:	008a      	lsls	r2, r1, #2
 8001fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001fda:	f7fe f91b 	bl	8000214 <__aeabi_uldivmod>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <UART_SetConfig+0x4e4>)
 8001fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	2164      	movs	r1, #100	@ 0x64
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	3332      	adds	r3, #50	@ 0x32
 8001ff6:	4a08      	ldr	r2, [pc, #32]	@ (8002018 <UART_SetConfig+0x4e4>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	f003 020f 	and.w	r2, r3, #15
 8002002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4422      	add	r2, r4
 800200a:	609a      	str	r2, [r3, #8]
}
 800200c:	bf00      	nop
 800200e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002012:	46bd      	mov	sp, r7
 8002014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002018:	51eb851f 	.word	0x51eb851f

0800201c <__libc_init_array>:
 800201c:	b570      	push	{r4, r5, r6, lr}
 800201e:	4d0d      	ldr	r5, [pc, #52]	@ (8002054 <__libc_init_array+0x38>)
 8002020:	4c0d      	ldr	r4, [pc, #52]	@ (8002058 <__libc_init_array+0x3c>)
 8002022:	1b64      	subs	r4, r4, r5
 8002024:	10a4      	asrs	r4, r4, #2
 8002026:	2600      	movs	r6, #0
 8002028:	42a6      	cmp	r6, r4
 800202a:	d109      	bne.n	8002040 <__libc_init_array+0x24>
 800202c:	4d0b      	ldr	r5, [pc, #44]	@ (800205c <__libc_init_array+0x40>)
 800202e:	4c0c      	ldr	r4, [pc, #48]	@ (8002060 <__libc_init_array+0x44>)
 8002030:	f000 f818 	bl	8002064 <_init>
 8002034:	1b64      	subs	r4, r4, r5
 8002036:	10a4      	asrs	r4, r4, #2
 8002038:	2600      	movs	r6, #0
 800203a:	42a6      	cmp	r6, r4
 800203c:	d105      	bne.n	800204a <__libc_init_array+0x2e>
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	f855 3b04 	ldr.w	r3, [r5], #4
 8002044:	4798      	blx	r3
 8002046:	3601      	adds	r6, #1
 8002048:	e7ee      	b.n	8002028 <__libc_init_array+0xc>
 800204a:	f855 3b04 	ldr.w	r3, [r5], #4
 800204e:	4798      	blx	r3
 8002050:	3601      	adds	r6, #1
 8002052:	e7f2      	b.n	800203a <__libc_init_array+0x1e>
 8002054:	080020ac 	.word	0x080020ac
 8002058:	080020ac 	.word	0x080020ac
 800205c:	080020ac 	.word	0x080020ac
 8002060:	080020b0 	.word	0x080020b0

08002064 <_init>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	bf00      	nop
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr

08002070 <_fini>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	bf00      	nop
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr
